type Verb {
    name: String!
}

type Aspect {
    name: String!
}

type Follower {
    name: String!
    aspects: [Aspect!]! @relation(name: "HAS_ASPECT", direction: OUT)
}

#Desire
type Desire {
    name: String!
    fromDesire: [FromDesire!]!
    toDesire: [FromDesire!]!
}

type FromDesire @relation(name: "OBTAINED_FROM") {
    from: Desire!
    to: Desire!
    ingredient1: String!
    ingredient2: String
}

type ChangeLesson {
    name: String!
}

# Lore
type Lore {
    name: String!
    aspects: [HasAspectLore!]!
    upgradesTo: Lore @relation(name: "UPGRADES_TO", direction: OUT)
    upgradedFrom: Lore @relation(name: "UPGRADES_TO", direction: IN)
    fromBook: [Book!]! @relation(name: "STUDY_RESULTS_IN", direction: IN)
    fromDreamingIn: [MansusDoorOption!]! @relation(name: "CAN_RESULT_IN", direction: IN)
    exploreResults: [Location!]! @relation(name: "EXPLORE_RESULTS_IN", direction: OUT)
}

type HasAspectLore @relation(name: "HAS_ASPECT") {
    from: Lore!
    to: Aspect!
    quantity: Int
}

#Language
type Language {
    name: String!
    requires: Language @relation(name: "REQUIRES", direction: OUT)
    fromBook: Book @relation(name: "STUDY_RESULTS_IN", direction: IN)
    fromTutor: [Tutor!]! @relation(name: "STUDY_RESULTS_IN", direction: IN)
    fromDreamingIn: MansusDoorOption @relation(name: "CAN_RESULT_IN", direction: IN)
}

# Rite
type RiteComponent {
    name: String!
    types: [String!]!
    isConsumed: Boolean
}

type Rite {
    name: String!
    components: [RiteComponent!]! @relation(name: "HAS_COMPONENT", direction: OUT)
    fromBook: [Book!]! @relation(name: "STUDY_RESULTS_IN", direction: IN)
}

#Influence
type Influence {
    name: String!
    aspects: [HasAspectInfluence!]!
    decaysTo: Influence @relation(name: "DECAYS_TO", direction: OUT)
    decaysFrom: [Influence!]! @relation(name: "DECAYS_TO", direction: IN)
    foundInLocation: [InfluenceFoundInLocation!]!
    fromDreamingIn: [MansusDoorOption!]! @relation(name: "CAN_RESULT_IN", direction: IN)
    fromBook: [Book!]! @relation(name: "STUDY_RESULTS_IN", direction: IN)
}

type HasAspectInfluence @relation(name: "HAS_ASPECT") {
    from: Influence!
    to: Aspect!
    quantity: Int
}

type InfluenceFoundInLocation @relation(name: "FOUND_IN") {
    from: Influence!
    to: Location!
    chance: Boolean!
}

#Mansus
type MansusDoor {
    name: String!
    options: [MansusDoorOption] @relation(name: "HAS_OPTION", direction: OUT)
}

type MansusDoorOption {
    name: String!
    door: MansusDoor @relation(name: "HAS_OPTION", direction: IN)
    influenceRewards: [Influence!]! @relation(name: "CAN_RESULT_IN", direction: OUT)
    ingredientRewards: [Ingredient!]! @relation(name: "CAN_RESULT_IN", direction: OUT)
    languageRewards: [Language!]! @relation(name: "CAN_RESULT_IN", direction: OUT)
    loreRewards: [Lore!]! @relation(name: "CAN_RESULT_IN", direction: OUT)
}

#Location
type Location {
    name: String!
    vault: Boolean!
    histories: [Lore!]! @relation(name: "EXPLORE_RESULTS_IN", direction: IN)
    obstacles: [ExpeditionObstacle!]! @relation(name: "HAS_OBSTACLE", direction: OUT)
    bookRewards: [Book!]! @relation(name: "FOUND_IN", direction: IN)
    ingredientRewards: [Ingredient!]! @relation(name: "FOUND_IN", direction: IN)
    influenceRewards: [Influence!]! @relation(name: "FOUND_IN", direction: IN)
    toolRewards: [Tool!]! @relation(name: "FOUND_IN", direction: IN)
} 

type ExpeditionObstacle {
    name: String!
    defeatedWith: [Aspect!]! @relation(name: "CAN_BE_DEFEATED_WITH", direction: OUT)
}

#Book
type Book {
    name: String!
    foundInLocation: [BookFoundInLocation!]! 
    language: Language @relation(name: "WRITTEN_IN", direction: OUT)
    studiedIntoLore: [Lore!]! @relation(name: "STUDY_RESULTS_IN", direction: OUT)
    teachesRite: Rite @relation(name: "STUDY_RESULTS_IN", direction: OUT)
    teachesLanguage: Language @relation(name: "STUDY_RESULTS_IN", direction: OUT)
    resultsInInfluence: [Influence!]! @relation(name: "STUDY_RESULTS_IN", direction: OUT)
    resultsInTool: Tool @relation(name: "STUDY_RESULTS_IN", direction: OUT)
}

type BookFoundInLocation @relation(name: "FOUND_IN") {
    from: Book!
    to: Location!
    chance: Boolean!
}

#Tool
type Tool {
    name: String!
    aspects: [ToolHasAspect!]!
    foundInLocation: [ToolFoundInLocation!]!
    fromBook: [Book!]! @relation(name: "STUDY_RESULTS_IN", direction: IN)
}

type ToolHasAspect @relation(name: "HAS_ASPECT") {
    from: Tool!
    to: Aspect!
    quantity: Int
}

type ToolFoundInLocation @relation(name: "FOUND_IN") {
    from: Tool!
    to: Location!
    chance: Boolean!
}

#Ingredient
type Ingredient {
    name: String!
    aspects: [IngredientHasAspect!]!
    foundInLocation: [IngredientFoundInLocation!]!
    fromDreamingIn: [MansusDoorOption!]! @relation(name: "CAN_RESULT_IN", direction: IN)
}

type IngredientHasAspect @relation(name: "HAS_ASPECT") {
    from: Ingredient!
    to: Aspect!
    quantity: Int
}

type IngredientFoundInLocation @relation(name: "FOUND_IN") {
    from: Ingredient!
    to: Location!
    chance: Boolean!
}

#Tutor
type Tutor {
    name: String!
    teachesLanguage: Language @relation(name: "STUDY_RESULTS_IN", direction: OUT)
}

union Entity = Lore | Book

type AspectQuantity {
    aspect: String!
    quantity: Int
}

type SearchEntity {
    _id: Int!
    name: String!
    label: String!
    aspects: [AspectQuantity!]!
}

type AspectSearchGroupResult {
    label: String!
    entities: [AspectSearchEntity!]!
}

type AspectSearchEntity {
    name: String!
    type: String!
    aspectQuantity: Int
}

type SetLanguageRequiresOut {
    language: String!
    requiredLanguage: String!
}

type Query {
    entityWithName(name: String!): [SearchEntity!]!
    entityWithAspect(aspect: String!): [AspectSearchGroupResult!]!
}

type Mutation {
    setLanguageRequires(language: String!, requiredLanguage: String!): SetLanguageRequiresOut!
}